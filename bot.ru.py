import os
import re
import subprocess
from datetime import datetime
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes
from telegram import Update
from telegram.ext import filters

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
FOLDER = '/app/InboxIdeas'

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
allowed_ids_raw = os.getenv("ALLOWED_IDS", "")
ALLOWED_USERS = set(int(uid.strip()) for uid in allowed_ids_raw.split(",") if uid.strip().isdigit())

def slugify(text: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.
    """
    text = re.sub(r'[^\w\s-]', '', text)
    words = text.strip().lower().split()[:5]
    return '_'.join(words) or 'idea'

async def ensure_git_repo(update: Update = None):
    """
    –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
    """
    repo_url = os.getenv("GIT_REPO_URL")
    if not repo_url:
        print("‚ùå GIT_REPO_URL –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    ssh_key_path = "/root/.ssh/obsidian_bot_ssh"
    os.environ["GIT_SSH_COMMAND"] = f"ssh -i {ssh_key_path} -o StrictHostKeyChecking=no"

    if not os.path.isdir(os.path.join(FOLDER, ".git")):
        print("üì• –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–ª–æ–Ω–∏—Ä—É–µ–º...")
        if os.path.isdir(FOLDER):
            print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {FOLDER} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è–µ–º –µ—ë –ø–µ—Ä–µ–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
            subprocess.run(["rm", "-rf", FOLDER], check=True)
        try:
            subprocess.run(["git", "clone", repo_url, FOLDER], check=True)
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω.")
        except subprocess.CalledProcessError as e:
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {e}"
            print(error_msg)
            if update:
                await update.message.reply_text(error_msg)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
        return

    if not text:
        await update.message.reply_text("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    await ensure_git_repo(update)

    os.makedirs(FOLDER, exist_ok=True)
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M')
    filename = slugify(text) + '.md'
    filepath = os.path.join(FOLDER, filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown-—Ñ–∞–π–ª
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(f"# {text[:60]}\n\n")
        f.write(f"*üïí {timestamp}*\n\n")
        f.write(text)

    await update.message.reply_text(f"‚úÖ –ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª `{filename}`")
    await git_commit_push(filename, update)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start.
    """
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    await update.message.reply_text("üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∫–∞–∫ Markdown-—Ñ–∞–π–ª —Å –∏–¥–µ–µ–π!")

async def git_commit_push(changed_file: str, update: Update = None):
    """
    –ö–æ–º–º–∏—Ç –∏ –ø—É—à –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    """
    ssh_key_path = "/root/.ssh/obsidian_bot_ssh"
    os.environ["GIT_SSH_COMMAND"] = f"ssh -i {ssh_key_path} -o StrictHostKeyChecking=no"

    try:
        print(f"üß† –ö–æ–º–º–∏—Ç–∏–º —Ñ–∞–π–ª: {changed_file}")
        subprocess.run(["git", "add", changed_file], cwd=FOLDER, check=True)
        subprocess.run(["git", "commit", "-m", f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–¥–µ—è: {changed_file}"], cwd=FOLDER, check=True)

        print("üì• –í—ã–ø–æ–ª–Ω—è–µ–º git pull --rebase...")
        subprocess.run(["git", "pull", "--rebase"], cwd=FOLDER, check=True)

        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
        subprocess.run(["git", "push", "origin", "HEAD:main"], cwd=FOLDER, check=True)
        print("‚úÖ –ü—É—à —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")

    except subprocess.CalledProcessError as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ Git: {e}"
        print(error_msg)
        if update:
            await update.message.reply_text(error_msg)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("üì¨ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∏–¥–µ–∏...")
    app.run_polling()

if __name__ == '__main__':
    main()